# PIPELINE DEFINITION
# Name: drift-stream-v2
# Description: Drift monitoring + dynamic retraining + online inference (v2)
# Inputs:
#    drift_window: int [Default: 300.0]
#    eval_stride: int [Default: 50.0]
#    hist_bins: int [Default: 64.0]
#    idle_timeout_s: int [Default: 60.0]
#    image: str [Default: 'unused']
#    infer_max_wall_secs: int [Default: 480.0]
#    infer_pause_on_retrain: bool [Default: False]
#    infer_wait_retrain: bool [Default: False]
#    js_calib_samples: int [Default: 400.0]
#    js_quantiles: str [Default: '0.90,0.97,0.995']
#    kafka_topic: str [Default: 'latencyTopic']
#    max_wall_secs: int [Default: 480.0]
#    producer_interval_ms: int [Default: 200.0]
#    producer_stages: str [Default: '']
#    retrain_cooldown_s: int [Default: 10.0]
#    retrain_max_wall_secs: int [Default: 120.0]
#    retrain_poll_interval_s: int [Default: 2.0]
#    retrain_watch: bool [Default: True]
components:
  comp-infer-op:
    executorLabel: exec-infer-op
    inputDefinitions:
      parameters:
        kafka_topic:
          defaultValue: latencyTopic
          isOptional: true
          parameterType: STRING
        max_wall_secs:
          defaultValue: 480.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        replica_id:
          parameterType: NUMBER_INTEGER
        wait_retrain:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
  comp-infer-op-2:
    executorLabel: exec-infer-op-2
    inputDefinitions:
      parameters:
        kafka_topic:
          defaultValue: latencyTopic
          isOptional: true
          parameterType: STRING
        max_wall_secs:
          defaultValue: 480.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        replica_id:
          parameterType: NUMBER_INTEGER
        wait_retrain:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
  comp-infer-op-3:
    executorLabel: exec-infer-op-3
    inputDefinitions:
      parameters:
        kafka_topic:
          defaultValue: latencyTopic
          isOptional: true
          parameterType: STRING
        max_wall_secs:
          defaultValue: 480.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        replica_id:
          parameterType: NUMBER_INTEGER
        wait_retrain:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
  comp-monitor-op:
    executorLabel: exec-monitor-op
    inputDefinitions:
      parameters:
        drift_window:
          defaultValue: 300.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        eval_stride:
          defaultValue: 50.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        hist_bins:
          defaultValue: 64.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        idle_timeout_s:
          defaultValue: 60.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        infer_pause_on_retrain:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
        js_calib_samples:
          defaultValue: 400.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        js_quantiles:
          defaultValue: 0.90,0.97,0.995
          isOptional: true
          parameterType: STRING
        kafka_topic:
          defaultValue: latencyTopic
          isOptional: true
          parameterType: STRING
        max_wall_secs:
          defaultValue: 480.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        retrain_cooldown_s:
          defaultValue: 10.0
          isOptional: true
          parameterType: NUMBER_INTEGER
  comp-offline-training-op:
    executorLabel: exec-offline-training-op
  comp-plot-op:
    executorLabel: exec-plot-op
  comp-producer-op:
    executorLabel: exec-producer-op
    inputDefinitions:
      parameters:
        interval_ms:
          defaultValue: 200.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        kafka_topic:
          defaultValue: latencyTopic
          isOptional: true
          parameterType: STRING
        producer_stages:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
  comp-retrain-op:
    executorLabel: exec-retrain-op
    inputDefinitions:
      parameters:
        max_wall_secs:
          defaultValue: 120.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        poll_interval_s:
          defaultValue: 2.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        watch:
          defaultValue: true
          isOptional: true
          parameterType: BOOLEAN
deploymentSpec:
  executors:
    exec-infer-op:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - infer_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef infer_op(\n    replica_id: int,\n    kafka_topic: str   = DEFAULT_KAFKA_TOPIC,\n\
          \    wait_retrain: bool = False,\n    max_wall_secs: int = 480,\n) -> None:\n\
          \    import os, subprocess\n    os.environ[\"PYTHONPATH\"] = \"/app\"\n\
          \    os.environ[\"S3_ENDPOINT\"]   = os.getenv(\"S3_ENDPOINT\",   DEFAULT_S3_ENDPOINT)\n\
          \    os.environ[\"S3_BUCKET\"]     = os.getenv(\"S3_BUCKET\",     DEFAULT_S3_BUCKET)\n\
          \    os.environ[\"S3_ACCESS_KEY\"] = os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n\
          \    os.environ[\"S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    os.environ[\"KAFKA_BROKERS\"] = os.getenv(\"KAFKA_BROKERS\", DEFAULT_KAFKA_BROKERS)\n\
          \    os.environ[\"KAFKA_TOPIC\"]   = kafka_topic\n    os.environ[\"CONSUMER_WAIT_RETRAIN\"\
          ] = \"1\" if wait_retrain else \"0\"\n    os.environ[\"MAX_WALL_SECS\"]\
          \ = str(max_wall_secs)\n    # \u4F20\u7ED9\u5BB9\u5668\uFF0C\u4FBF\u4E8E\
          \u8D44\u6E90\u6587\u4EF6\u547D\u540D\u56FA\u5B9A\u4E3A infer1/2/3\n    os.environ[\"\
          INFER_REPLICA_ID\"] = str(replica_id)\n    subprocess.run([\"python\", \"\
          -m\", \"drst_inference.online.inference_consumer\"], check=True)\n\n"
        image: hirschazer/infer:latest
    exec-infer-op-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - infer_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef infer_op(\n    replica_id: int,\n    kafka_topic: str   = DEFAULT_KAFKA_TOPIC,\n\
          \    wait_retrain: bool = False,\n    max_wall_secs: int = 480,\n) -> None:\n\
          \    import os, subprocess\n    os.environ[\"PYTHONPATH\"] = \"/app\"\n\
          \    os.environ[\"S3_ENDPOINT\"]   = os.getenv(\"S3_ENDPOINT\",   DEFAULT_S3_ENDPOINT)\n\
          \    os.environ[\"S3_BUCKET\"]     = os.getenv(\"S3_BUCKET\",     DEFAULT_S3_BUCKET)\n\
          \    os.environ[\"S3_ACCESS_KEY\"] = os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n\
          \    os.environ[\"S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    os.environ[\"KAFKA_BROKERS\"] = os.getenv(\"KAFKA_BROKERS\", DEFAULT_KAFKA_BROKERS)\n\
          \    os.environ[\"KAFKA_TOPIC\"]   = kafka_topic\n    os.environ[\"CONSUMER_WAIT_RETRAIN\"\
          ] = \"1\" if wait_retrain else \"0\"\n    os.environ[\"MAX_WALL_SECS\"]\
          \ = str(max_wall_secs)\n    # \u4F20\u7ED9\u5BB9\u5668\uFF0C\u4FBF\u4E8E\
          \u8D44\u6E90\u6587\u4EF6\u547D\u540D\u56FA\u5B9A\u4E3A infer1/2/3\n    os.environ[\"\
          INFER_REPLICA_ID\"] = str(replica_id)\n    subprocess.run([\"python\", \"\
          -m\", \"drst_inference.online.inference_consumer\"], check=True)\n\n"
        image: hirschazer/infer:latest
    exec-infer-op-3:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - infer_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef infer_op(\n    replica_id: int,\n    kafka_topic: str   = DEFAULT_KAFKA_TOPIC,\n\
          \    wait_retrain: bool = False,\n    max_wall_secs: int = 480,\n) -> None:\n\
          \    import os, subprocess\n    os.environ[\"PYTHONPATH\"] = \"/app\"\n\
          \    os.environ[\"S3_ENDPOINT\"]   = os.getenv(\"S3_ENDPOINT\",   DEFAULT_S3_ENDPOINT)\n\
          \    os.environ[\"S3_BUCKET\"]     = os.getenv(\"S3_BUCKET\",     DEFAULT_S3_BUCKET)\n\
          \    os.environ[\"S3_ACCESS_KEY\"] = os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n\
          \    os.environ[\"S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    os.environ[\"KAFKA_BROKERS\"] = os.getenv(\"KAFKA_BROKERS\", DEFAULT_KAFKA_BROKERS)\n\
          \    os.environ[\"KAFKA_TOPIC\"]   = kafka_topic\n    os.environ[\"CONSUMER_WAIT_RETRAIN\"\
          ] = \"1\" if wait_retrain else \"0\"\n    os.environ[\"MAX_WALL_SECS\"]\
          \ = str(max_wall_secs)\n    # \u4F20\u7ED9\u5BB9\u5668\uFF0C\u4FBF\u4E8E\
          \u8D44\u6E90\u6587\u4EF6\u547D\u540D\u56FA\u5B9A\u4E3A infer1/2/3\n    os.environ[\"\
          INFER_REPLICA_ID\"] = str(replica_id)\n    subprocess.run([\"python\", \"\
          -m\", \"drst_inference.online.inference_consumer\"], check=True)\n\n"
        image: hirschazer/infer:latest
    exec-monitor-op:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - monitor_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef monitor_op(\n    # \u2014\u2014 monitor \u4E13\u5C5E\u53C2\u6570\
          \uFF08\u4E0D\u4F1A\u5F71\u54CD retrain\uFF09\u2014\u2014\n    kafka_topic:\
          \ str               = DEFAULT_KAFKA_TOPIC,\n    drift_window: int      \
          \        = 300,\n    eval_stride: int               = 50,\n    hist_bins:\
          \ int                 = 64,\n    idle_timeout_s: int            = 60,\n\
          \    max_wall_secs: int             = 480,   # monitor \u7684 wall \u4E0A\
          \u9650\uFF08\u9ED8\u8BA4 480\uFF09\n    js_quantiles: str              =\
          \ \"0.90,0.97,0.995\",\n    js_calib_samples: int          = 400,\n    infer_pause_on_retrain:\
          \ bool   = False,\n    retrain_cooldown_s: int        = 10,\n) -> None:\n\
          \    import os, subprocess\n    os.environ[\"PYTHONPATH\"] = \"/app\"\n\
          \    os.environ[\"S3_ENDPOINT\"]   = os.getenv(\"S3_ENDPOINT\",   DEFAULT_S3_ENDPOINT)\n\
          \    os.environ[\"S3_BUCKET\"]     = os.getenv(\"S3_BUCKET\",     DEFAULT_S3_BUCKET)\n\
          \    os.environ[\"S3_ACCESS_KEY\"] = os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n\
          \    os.environ[\"S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    os.environ[\"KAFKA_BROKERS\"] = os.getenv(\"KAFKA_BROKERS\", DEFAULT_KAFKA_BROKERS)\n\
          \    os.environ[\"KAFKA_TOPIC\"]   = kafka_topic\n\n    os.environ[\"DRIFT_WINDOW\"\
          ]  = str(drift_window)\n    os.environ[\"EVAL_STRIDE\"]   = str(eval_stride)\n\
          \    os.environ[\"HIST_BINS\"]     = str(hist_bins)\n    os.environ[\"MONITOR_IDLE_TIMEOUT_S\"\
          ] = str(idle_timeout_s)\n    os.environ[\"MAX_WALL_SECS\"] = str(max_wall_secs)\
          \  # \u2190 \u4EC5 monitor \u4F7F\u7528\n\n    os.environ[\"JS_QUANTILES\"\
          ]     = js_quantiles\n    os.environ[\"JS_CALIB_SAMPLES\"] = str(js_calib_samples)\n\
          \    os.environ[\"MONITOR_SIGNAL_INFER_PAUSE\"] = \"1\" if infer_pause_on_retrain\
          \ else \"0\"\n    os.environ[\"RETRAIN_COOLDOWN_S\"] = str(retrain_cooldown_s)\n\
          \    subprocess.run([\"python\", \"-m\", \"drst_drift.monitor\"], check=True)\n\
          \n"
        image: hirschazer/monitor:latest
    exec-offline-training-op:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - offline_training_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef offline_training_op() -> None:\n    import os, subprocess\n \
          \   os.environ[\"PYTHONPATH\"] = \"/app\"\n    os.environ[\"S3_ENDPOINT\"\
          ]   = os.getenv(\"S3_ENDPOINT\",   DEFAULT_S3_ENDPOINT)\n    os.environ[\"\
          S3_BUCKET\"]     = os.getenv(\"S3_BUCKET\",     DEFAULT_S3_BUCKET)\n   \
          \ os.environ[\"S3_ACCESS_KEY\"] = os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n\
          \    os.environ[\"S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    subprocess.run([\"python\", \"-m\", \"drst_inference.offline.train_offline\"\
          ], check=True)\n\n"
        image: hirschazer/offline:latest
    exec-plot-op:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - plot_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef plot_op() -> None:\n    import os, subprocess\n    os.environ[\"\
          PYTHONPATH\"] = \"/app\"\n    os.environ[\"S3_ENDPOINT\"]   = os.getenv(\"\
          S3_ENDPOINT\",   DEFAULT_S3_ENDPOINT)\n    os.environ[\"S3_BUCKET\"]   \
          \  = os.getenv(\"S3_BUCKET\",     DEFAULT_S3_BUCKET)\n    os.environ[\"\
          S3_ACCESS_KEY\"] = os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n\
          \    os.environ[\"S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    try:\n        subprocess.run([\"python\", \"-m\", \"drst_inference.plotting.plot_final\"\
          ], check=True)\n    except Exception as e:\n        print(f\"[plot_final]\
          \ skipped: {e}\", flush=True)\n    try:\n        subprocess.run([\"python\"\
          , \"experiments/kubeflow/summarize_resources.py\"], check=True)\n    except\
          \ Exception as e:\n        print(f\"[plot_op] summarize_resources.py skipped:\
          \ {e}\", flush=True)\n    try:\n        subprocess.run([\"python\", \"-m\"\
          , \"drst_inference.plotting.plot_report\"], check=True)\n    except Exception\
          \ as e:\n        print(f\"[plot_report] skipped: {e}\", flush=True)\n\n"
        image: hirschazer/plot:latest
    exec-producer-op:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - producer_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef producer_op(\n    kafka_topic: str = DEFAULT_KAFKA_TOPIC,\n \
          \   interval_ms: int = 200,\n    producer_stages: str = \"\",\n) -> None:\n\
          \    import os, subprocess\n    os.environ[\"PYTHONPATH\"] = \"/app\"\n\
          \    os.environ[\"KAFKA_BROKERS\"] = os.getenv(\"KAFKA_BROKERS\", DEFAULT_KAFKA_BROKERS)\n\
          \    os.environ[\"KAFKA_TOPIC\"]   = kafka_topic\n    os.environ[\"S3_ENDPOINT\"\
          ]   = os.getenv(\"S3_ENDPOINT\",   DEFAULT_S3_ENDPOINT)\n    os.environ[\"\
          S3_BUCKET\"]     = os.getenv(\"S3_BUCKET\",     DEFAULT_S3_BUCKET)\n   \
          \ os.environ[\"S3_ACCESS_KEY\"] = os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n\
          \    os.environ[\"S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    if producer_stages:\n        os.environ[\"PRODUCER_STAGES\"] = producer_stages\n\
          \    os.environ[\"INTERVAL_MS\"] = str(interval_ms)\n    subprocess.run([\"\
          python\", \"-m\", \"drst_inference.online.producer\"], check=True)\n\n"
        image: hirschazer/producer:latest
    exec-retrain-op:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - retrain_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef retrain_op(\n    # \u2014\u2014 retrain \u4E13\u5C5E\u53C2\u6570\
          \uFF08\u4E0D\u5F71\u54CD monitor\uFF09\u2014\u2014\n    watch: bool    \
          \      = True,\n    poll_interval_s: int = 2,\n    max_wall_secs: int  \
          \ = 120,   # retrain \u7684 wall \u4E0A\u9650\uFF08\u9ED8\u8BA4 120\uFF09\
          \n) -> None:\n    import os, subprocess\n    os.environ[\"PYTHONPATH\"]\
          \ = \"/app\"\n    os.environ[\"S3_ENDPOINT\"]   = os.getenv(\"S3_ENDPOINT\"\
          ,   DEFAULT_S3_ENDPOINT)\n    os.environ[\"S3_BUCKET\"]     = os.getenv(\"\
          S3_BUCKET\",     DEFAULT_S3_BUCKET)\n    os.environ[\"S3_ACCESS_KEY\"] =\
          \ os.getenv(\"S3_ACCESS_KEY\", DEFAULT_S3_ACCESS_KEY)\n    os.environ[\"\
          S3_SECRET_KEY\"] = os.getenv(\"S3_SECRET_KEY\", DEFAULT_S3_SECRET_KEY)\n\
          \    os.environ[\"S3_SECURE\"]     = os.getenv(\"S3_SECURE\",     DEFAULT_S3_SECURE)\n\
          \    os.environ[\"RETRAIN_WATCH\"]   = \"1\" if watch else \"0\"\n    os.environ[\"\
          POLL_INTERVAL_S\"] = str(poll_interval_s)\n    os.environ[\"MAX_WALL_SECS\"\
          ]   = str(max_wall_secs)  # \u2190 \u4EC5 retrain \u4F7F\u7528\n    subprocess.run([\"\
          python\", \"-m\", \"drst_drift.dynamic_retrain\"], check=True)\n\n"
        image: hirschazer/retrain:latest
pipelineInfo:
  description: Drift monitoring + dynamic retraining + online inference (v2)
  name: drift-stream-v2
root:
  dag:
    tasks:
      infer-op:
        cachingOptions: {}
        componentRef:
          name: comp-infer-op
        dependentTasks:
        - offline-training-op
        inputs:
          parameters:
            kafka_topic:
              componentInputParameter: kafka_topic
            max_wall_secs:
              componentInputParameter: infer_max_wall_secs
            replica_id:
              runtimeValue:
                constant: 0.0
            wait_retrain:
              componentInputParameter: infer_wait_retrain
        taskInfo:
          name: infer-op
      infer-op-2:
        cachingOptions: {}
        componentRef:
          name: comp-infer-op-2
        dependentTasks:
        - offline-training-op
        inputs:
          parameters:
            kafka_topic:
              componentInputParameter: kafka_topic
            max_wall_secs:
              componentInputParameter: infer_max_wall_secs
            replica_id:
              runtimeValue:
                constant: 1.0
            wait_retrain:
              componentInputParameter: infer_wait_retrain
        taskInfo:
          name: infer-op-2
      infer-op-3:
        cachingOptions: {}
        componentRef:
          name: comp-infer-op-3
        dependentTasks:
        - offline-training-op
        inputs:
          parameters:
            kafka_topic:
              componentInputParameter: kafka_topic
            max_wall_secs:
              componentInputParameter: infer_max_wall_secs
            replica_id:
              runtimeValue:
                constant: 2.0
            wait_retrain:
              componentInputParameter: infer_wait_retrain
        taskInfo:
          name: infer-op-3
      monitor-op:
        cachingOptions: {}
        componentRef:
          name: comp-monitor-op
        dependentTasks:
        - offline-training-op
        inputs:
          parameters:
            drift_window:
              componentInputParameter: drift_window
            eval_stride:
              componentInputParameter: eval_stride
            hist_bins:
              componentInputParameter: hist_bins
            idle_timeout_s:
              componentInputParameter: idle_timeout_s
            infer_pause_on_retrain:
              componentInputParameter: infer_pause_on_retrain
            js_calib_samples:
              componentInputParameter: js_calib_samples
            js_quantiles:
              componentInputParameter: js_quantiles
            kafka_topic:
              componentInputParameter: kafka_topic
            max_wall_secs:
              componentInputParameter: max_wall_secs
            retrain_cooldown_s:
              componentInputParameter: retrain_cooldown_s
        taskInfo:
          name: monitor-op
      offline-training-op:
        cachingOptions: {}
        componentRef:
          name: comp-offline-training-op
        taskInfo:
          name: offline-training-op
      plot-op:
        cachingOptions: {}
        componentRef:
          name: comp-plot-op
        dependentTasks:
        - infer-op
        - infer-op-2
        - infer-op-3
        - monitor-op
        - producer-op
        - retrain-op
        taskInfo:
          name: plot-op
      producer-op:
        cachingOptions: {}
        componentRef:
          name: comp-producer-op
        dependentTasks:
        - offline-training-op
        inputs:
          parameters:
            interval_ms:
              componentInputParameter: producer_interval_ms
            kafka_topic:
              componentInputParameter: kafka_topic
            producer_stages:
              componentInputParameter: producer_stages
        taskInfo:
          name: producer-op
      retrain-op:
        cachingOptions: {}
        componentRef:
          name: comp-retrain-op
        dependentTasks:
        - offline-training-op
        inputs:
          parameters:
            max_wall_secs:
              componentInputParameter: retrain_max_wall_secs
            poll_interval_s:
              componentInputParameter: retrain_poll_interval_s
            watch:
              componentInputParameter: retrain_watch
        taskInfo:
          name: retrain-op
  inputDefinitions:
    parameters:
      drift_window:
        defaultValue: 300.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      eval_stride:
        defaultValue: 50.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      hist_bins:
        defaultValue: 64.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      idle_timeout_s:
        defaultValue: 60.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      image:
        defaultValue: unused
        isOptional: true
        parameterType: STRING
      infer_max_wall_secs:
        defaultValue: 480.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      infer_pause_on_retrain:
        defaultValue: false
        isOptional: true
        parameterType: BOOLEAN
      infer_wait_retrain:
        defaultValue: false
        isOptional: true
        parameterType: BOOLEAN
      js_calib_samples:
        defaultValue: 400.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      js_quantiles:
        defaultValue: 0.90,0.97,0.995
        isOptional: true
        parameterType: STRING
      kafka_topic:
        defaultValue: latencyTopic
        isOptional: true
        parameterType: STRING
      max_wall_secs:
        defaultValue: 480.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      producer_interval_ms:
        defaultValue: 200.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      producer_stages:
        defaultValue: ''
        isOptional: true
        parameterType: STRING
      retrain_cooldown_s:
        defaultValue: 10.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      retrain_max_wall_secs:
        defaultValue: 120.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      retrain_poll_interval_s:
        defaultValue: 2.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      retrain_watch:
        defaultValue: true
        isOptional: true
        parameterType: BOOLEAN
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.2
